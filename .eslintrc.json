{
  "env": {
    "browser": true,
    "es6": true
  },
  "parser": "@typescript-eslint/parser", // Specifies the ESLint parser
  "parserOptions": {
    "sourceType": "module" // Allows for the use of imports
  },
  // register plugins that we want to use here
  "plugins": [
    "@typescript-eslint", // most of the typescript rules come from this plugin
    "eslint-plugin-tsdoc",
    "import", // import specific rules (things like using import instead of require)
    "prettier", // prettier rules
    "react-hooks", // hook related rules
    "react" // general react rules
  ],
  "extends": [
    "next/core-web-vitals",
    "plugin:storybook/recommended",
    "prettier"
  ], //  enables the config from eslint-config-prettier, which turns off some eslnt rules that conflict with prettier
  "overrides": [
    {
      "files": [
        "src/**/*.{ts,tsx}",
        "cypress/**/*.ts"
      ],
      "rules": {
        "tsdoc/syntax": "warn",
        // Place to specify ESLint rules. Can be used to overwrite rules specified from the extended configs
        "prettier/prettier": ["error", { "endOfLine": "auto" }],
        "react/jsx-uses-react": "error",
        "react/jsx-uses-vars": "error",
        "react/self-closing-comp": "error",
        "react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
        "react/jsx-filename-extension": [1, {
          "extensions": ["jsx", "tsx"]
        }],
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": "error",
        "@typescript-eslint/ban-types": "error",
        "@typescript-eslint/naming-convention": [
          "error",
          { "selector": "class", "format": ["PascalCase"] }
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/member-ordering": "error",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-invalid-this": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/no-unused-vars":"warn",
        "@typescript-eslint/no-use-before-declare": "off",
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/unified-signatures": "error",
        "complexity": "off",
        "constructor-super": "error",
        "curly": "error",
        "dot-notation": "error",
        "quotes": "off",
        "eqeqeq": ["error", "smart"],
        "guard-for-in": "error",
        "id-match": "error",
        "no-async-promise-executor": "error",
        "no-bitwise": "error",
        "no-caller": "error",
        "no-cond-assign": "error",
        "no-console": "warn", // set console to warning so we can at least use it to debug
        "no-debugger": "error",
        "no-empty": "error",
        "no-explicit-any": "off",
        "no-eval": "error",
        "no-fallthrough": "off",
        "no-invalid-this": "off",
        "no-new-wrappers": "error",
        "no-return-await": "off",
        "no-shadow": "off",
        "no-throw-literal": "error",
        "no-undef-init": "error",
        "no-unneeded-ternary": ["error", { "defaultAssignment": false }],
        "no-unsafe-finally": "error",
        "no-unused-expressions": "error",
        "no-unused-labels": "error",
        "no-unused-vars": "off",
        "no-var": "error",
        "object-shorthand": "error",
        "one-var": ["error", "never"],
        "prefer-const": "error",
        "radix": "error",
        "require-await": "error",
        "spaced-comment": "error",
        "use-isnan": "error",
        "valid-typeof": "off"
      }
    },
    // js specific rules can go here, generally we are moving towards ts files so dont need to focus on the rules here too much
    {
      "files": ["*.js"],
      "rules": {
        "@typescript-eslint/no-unused-vars": "off"
      }
    }
  ]
}
